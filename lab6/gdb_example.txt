Script started on 2019-10-18 17:27:45-0400
]0;dingruos@b3200-03:/h/u4/c7/04/dingruos/csc209/dingruos/lab6b3200-03:~/csc209/dingruos/lab6$ gdb overflow
GNU gdb (Ubuntu 8.1-0ubuntu3.1) 8.1.0.20180409-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from overflow...done.
(gdb) list
1	#include <stdio.h>
2	
3	#define SIZE 4
4	#define OVERFLOW 5
5	
6	int main() {
7	    int index = 0;
8	    int i;
9	    int before[SIZE] = {10, 10, 10, 10};
10	    int a[SIZE] = {0, 0, 0, 0};
(gdb) ;os[K[K[Klist
11	    int after[SIZE] = {10, 10, 10, 10};
12	
13	    printf("Address of the variables:\n");
14	    for (index = 0; index < SIZE; index++) {
15	        printf("%lx -> &after[%d]\n", (unsigned long) &after[index], index);
16	    }
17	    for (index = 0; index < SIZE; index++) {
18	        printf("%lx -> &a[%d]\n", (unsigned long) &a[index], index);
19	    }
20	    for (index = 0; index < SIZE; index++) {
(gdb) ;os[K[K[Klist
21	        printf("%lx -> &before[%d]\n", (unsigned long) &before[index], index);
22	    }
23	    printf("%lx -> &i\n", (unsigned long)&i);
24	    printf("%lx -> &index\n", (unsigned long)&index);
25	    printf("\n");
26	
27	
28	    printf("Initial values:\n");
29	    printf("i = %d\n", i);
30	    printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) l[Klist
31	    printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
32	    printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
33	    printf("\n");
34	
35	
36	    for (i = 0; i < OVERFLOW; i++) {
37	        a[i] = i * 10;
38	        printf("i = %d\n", i);
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) nr[K[Kbreat[Kk ,a[K[Kmian[K[K[Kain
Breakpoint 1 at 0x742: file overflow.c, line 6.
(gdb) break 37
Breakpoint 2 at 0x965: file overflow.c, line 37.
(gdb) lsi[K[K[Krun
Starting program: /h/u4/c7/04/dingruos/csc209/dingruos/lab6/overflow 

Breakpoint 1, main () at overflow.c:6
6	int main() {
(gdb) continue
Continuing.
Address of the variables:
7fffffffe6a0 -> &after[0]
7fffffffe6a4 -> &after[1]
7fffffffe6a8 -> &after[2]
7fffffffe6ac -> &after[3]
7fffffffe690 -> &a[0]
7fffffffe694 -> &a[1]
7fffffffe698 -> &a[2]
7fffffffe69c -> &a[3]
7fffffffe680 -> &before[0]
7fffffffe684 -> &before[1]
7fffffffe688 -> &before[2]
7fffffffe68c -> &before[3]
7fffffffe67c -> &i
7fffffffe678 -> &index

Initial values:
i = 0
before = {10, 10, 10, 10}
a = {0, 0, 0, 0}
after = {10, 10, 10, 10}


Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
(gdb) next
38	        printf("i = %d\n", i);
(gdb) next
i = 0
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) 
a = {0, 0, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
(gdb) 
38	        printf("i = %d\n", i);
(gdb) 
i = 1
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) 
a = {0, 10, 0, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
(gdb) 
38	        printf("i = %d\n", i);
(gdb) 
i = 2
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) 
a = {0, 10, 20, 0}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
(gdb) 
38	        printf("i = %d\n", i);
(gdb) 
i = 3
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) 
after = {10, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) 

Breakpoint 2, main () at overflow.c:37
37	        a[i] = i * 10;
(gdb) 
38	        printf("i = %d\n", i);
(gdb) 
i = 4
39	        printf("before = {%d, %d, %d, %d}\n", before[0], before[1], before[2], before[3]);
(gdb) 
before = {10, 10, 10, 10}
40	        printf("a = {%d, %d, %d, %d}\n", a[0], a[1], a[2], a[3]);
(gdb) 
a = {0, 10, 20, 30}
41	        printf("after = {%d, %d, %d, %d}\n", after[0], after[1], after[2], after[3]);
(gdb) 
after = {40, 10, 10, 10}
36	    for (i = 0; i < OVERFLOW; i++) {
(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) 
[K(gdb) pi[Krint &()a)f)t)e)r)[)])0])[C[C
$1 = (int *) 0x7fffffffe6a0
(gdb) print &(after[4])[1P[4])[1P[4])[1P[4])[1P[4])
$3 = (int *) 0x7fffffffe6a0
(gdb) 
$4 = (int *) 0x7fffffffe6a0
(gdb) next
44	    return 0;
(gdb) next
45	}
(gdb) 
__libc_start_main (main=0x55555555473a <main>, argc=1, argv=0x7fffffffe7a8, init=<optimized out>, 
    fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffe798)
    at ../csu/libc-start.c:344
344	../csu/libc-start.c: No such file or directory.
(gdb) exit
Undefined command: "exit".  Try "help".
(gdb) quit
A debugging session is active.

	Inferior 1 [process 47744] will be killed.

Quit anyway? (y or n) y
]0;dingruos@b3200-03:/h/u4/c7/04/dingruos/csc209/dingruos/lab6b3200-03:~/csc209/dingruos/lab6$ exit
exit

Script done on 2019-10-18 17:34:59-0400
